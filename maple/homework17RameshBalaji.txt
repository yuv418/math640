#OK to post homework
#Ramesh Balaji,3/24/2024,hw17

# Part 1: MaxPer

SR:=proc(INI,L,n) local r,i,M,ng:
	r:=nops(L):
	if nops(INI)<>L[-1] then
		 RETURN(FAIL):
	fi:

	if not (convert(INI,set)={0,1} or convert(INI,set)={1}) then
		 RETURN(FAIL):
	fi:

	if not (type(L,list) and {seq(type(L[i],posint),i=1..nops(L))}={true} and sort(L)=L) then
		   RETURN(FAIL):
	fi:
	if not type(n,posint) then
	     RETURN(FAIL):
	fi:

	M:=INI:

	while(nops(M))<n do
		 ng:=add(M[-L[i]],i=1..r) mod 2:
		 M:=[op(M),ng]:
	od:

	return M:

end:


PolToList := proc(P, d, x) local i:
	return [seq(coeff(P, x,i) mod 2, i=0..d)];
end:

AllPols:=proc(q,d,x) local S,s,i:
option remember:
if d=0 then
 RETURN({seq(i,i=0..q-1)}):
fi:
S:=AllPols(q,d-1,x):
{seq(seq(s+i*x^d,i=0..q-1), s in S)}:
end:

#IsIr(P): Is P irreducible mod 2?
IsIr:=proc(P)
option remember:
evalb(Factor(P) mod 2=P mod 2):
end:

#IsPr(P,x): is the polynomial P in x of degree d, say, primitive?
IsPr:=proc(P,x) local d,m,i:
option remember:
d:=degree(P,x):
m:=2^d-1:
 for i from 1 to m-1 do
   if rem(x^i,P,x) mod 2=1 then
     RETURN(false):
   fi:
od:
if rem(x^m,P,x) mod 2<>1 then
   print(`Something bad happened, Cocks' aritcle is wrong!, or more likely (according to George)`):
   print(`we messed up`):
    RETURN(FAIL):
fi:
true: 
end:
WisW:=proc(d,x) local S,s, Si, Sp, Sip, Sne:
#Si:=set of pol. of degree d (mod 2) that are irreducible but NOT primitive
#Sp:=set of pol. of degree d (mod 2) that are NOT irreducible but  primitive
#Sip:=set of pol. of degree d (mod 2) that are BOTH irreducible and  primitive
#Sne= neither
S:=PolsE(x,d):
Si:={}: Sp:={}: Sip:={}: Sne:={}:

for s in S do
 if IsIr(s) and not IsPr(s,x) then
   Si:=Si union {s}:
  elif  not IsIr(s) and  IsPr(s,x) then
    Sp:=Sp union {s}:
  elif   IsIr(s) and  IsPr(s,x) then
    Sip:=Sip union {s}:
   else
     Sne:=Sne union {s}:
  fi:
 od:

[Sne,Si,Sp,Sip]:
end:


MaxPer := proc(d, x):
	pls := {}:
	for P in AllPols(2, d, x) do:
		p_list := PolToList(P,d,x):
		if FindPer(SR([1,0$(d-1)], p_list, nops(p_list))) = ((2^d)-1) then
			pls := pls union {P}:
		fi:
	od:

	return pls:
end:

for deg from 3 to 10 do:
	# looks like WisW has.. problems?
	if MaxPer(deg, x) = WisW(deg,x)[4] then:
		print("equal for " || deg)
	fi:
od:

# Part 2: generalize 

qPols := proc(q,x,d):
if d=0 then
 RETURN({q-1}):
fi:
S:=qPols(q,x,d-1):
S union {seq(s+x^d,s in S)}:	
end:

qIsIr := proc(q,P)
	option remember:
	evalb(Factor(P) mod q=P mod q):
end:

qPolsE := proc(q,x,d):
S:=qPols(q,x,d-1):
{seq(s+x^d, s in S)}:
end:

qIsPr := proc(q,P,x):
	
d:=degree(P,x):
m:=q^d-1:
 for i from 1 to m-1 do
   if rem(x^i,P,x) mod q<>0 then
     RETURN(false):
   fi:
od:
if rem(x^m,P,x) mod q=0 then
   print(`Something bad happened, Cocks' aritcle is wrong!, or more likely (according to George)`):
   print(`we messed up`):
    RETURN(FAIL):
fi:
true: 	
end:

qWisW := proc(q,x,d):
	
S:=qPolsE(q,x,d):
Si:={}: Sp:={}: Sip:={}: Sne:={}:

for s in S do
 if qIsIr(q,s) and not qIsPr(q,s,x) then
   Si:=Si union {s}:
  elif  not qIsIr(q,s) and  qIsPr(q,s,x) then
    Sp:=Sp union {s}:
  elif   qIsIr(q,s) and  qIsPr(q,s,x) then
    Sip:=Sip union {s}:
   else
     Sne:=Sne union {s}:
  fi:
 od:

[Sne,Si,Sp,Sip]:	
end:

qPolToList := proc(q, P, d, x) local i:
	return [seq(coeff(P, x,i) mod q, i=0..d)];
end:
qMaxPer := proc(q,x,d):
	pls := {}:
	print(d);
	for P in qAllPols(q, d, x) do:
		p_list := qPolToList(q,P,d,x):
		if FindPer(SR([1,0$(d-1)], p_list, nops(p_list))) = ((q^d)-1) then
			pls := pls union {P}:
		fi:
	od:

	return pls:
end:
for deg from 3 to 5 do:
	if qMaxPer(3,x,deg)=qWisW(3,x,deg)[4] then:
		print("OK");
	fi:
od:

